<section>
      <div class="container-fluid cpluscourse_con">
        <div class="container">
          <div class="row">
            <div class="page_heading cpluscourse_heading">COURSES</div>
            <h1>C++ Course</h1><hr>
            <h4 class="align_justify">
                Objects. C++ introduces object-oriented programming (OOP) features to C. It offers classes, which provide the four features commonly present in OOP (and some non-OOP) languages: abstraction, encapsulation, inheritance, and polymorphism.<br>
                C++ is a general-purpose object-oriented programming (OOP) language, developed by Bjarne Stroustrup, and is an extension of the C language. It is therefore possible to code C++ in a "C style" or "object-oriented style." ... However, it was renamed C++ in 1983. It is pronounced "see-plus-plus."
            </h4>
            <h3><b>6 Weeks/Month Course</b></h3><hr>
            <h5>
            <b>PERSPECTIVE</b>
            <br>•The Software Crisis
            <br>•Design Techniques
            <br>•Large Software Systems
            <br>•Roots of Object Technology
            <br>•What Is Object-Oriented Programming?
            <br>•C++ and Object-Oriented Programming
            <br>•Why C++?
            <br>•Features of C++
            <br>•Pros and Cons of C++<hr>
            <b>THE LANGUAGE OF OBJECT-ORIENTATION</b>
            <br>•What Is an Object?
            <br>•What Is a Class?
            <br>•Encapsulation
            <br>•Data Hiding
            <br>•The Public Interface
            <br>•Relationships Among Classes
            <br>•Inheritance
            <br>•Polymorphism
            <br>•Object-Oriented Design<hr>
            <b>C VS C++</b>
            <br>•Comments
            <br>•Namespaces
            <br>•Simple Output
            <br>•Simple Input
            <br>•Definitions Near to First Use
            <br>•Function Prototypes
            <br>•The inline Specifier
            <br>•const
            <br>•Structure Members
            <br>•The Reference Type
            <br>•Overloading Function Names
            <br>•Default Parameters
            <br>•The Scope Resolution Operator
            <br>•Aggregates
            <br>•Operators new and delete
            <br>•The bool Data Type
            <br>•The string Data Type<hr>
            <b>FUNDAMENTALS OF CLASSES</b>
            <br>•Data Types
            <br>•User Defined Data Types
            <br>•Using the Class Concept
            <br>•Defining a Class
            <br>•public and private Access Levels
            <br>•The Scope Resolution Operator ::
            <br>•Using Class Objects Like Built-in Types
            <br>•Scope
            <br>•Constructors
            <br>•Member Initialization Lists
            <br>•Destructors
            <br>•Array of Objects
            <br>•Pointers
            <br>•The this Pointer
            <br>•Passing Objects to Functions
            <br>•Returning Objects From Functions
            <br>•static Class Members<hr>
            <b>OPERATOR OVERLOADING</b>
            <br>•Introduction
            <br>•Rules for Operator Overloading
            <br>•Rationale for Operator Overloading
            <br>•Overloading Member Functions
            <br>•Overloading Non-Member Functions
            <br>•friend Functions
            <br>•The Copy Constructor
            <br>•The Assignment Operator
            <br>•Overloading [ ]
            <br>•Overloading Increment and Decrement Operators
            <br>•const Objects and References<hr>
            <b>COMPOSITION OF CLASSES</b>
            <br>•Relationships
            <br>•Composition of Classes
            <br>•The Point Class
            <br>•The Line Class
            <br>•Member Initialization Lists
            <br>•An Application With Composition
            <br>•The Copy Constructor Under Composition
            <br>•operator= Under Composition<hr>
            <b>INHERITANCE</b>
            <br>•Introduction
            <br>•Public Base Classes
            <br>•The protected Access Level
            <br>•Member Initialization Lists
            <br>•What Isn’t Inherited
            <br>•Assignments Between Base and Derived Objects
            <br>•Compile-Time vs Run-Time Binding
            <br>•virtual Functions
            <br>•Polymorphism
            <br>•virtual Destructors
            <br>•Pure virtual Functions
            <br>•Abstract Base Classes
            <br>•An Extended Inheritance Example<hr>
            <b>I/O IN C++</b>
            <br>•The iostream Library
            <br>•Predefined Streams
            <br>•Overloading operator<<
            <br>•Overloading operator>>
            <br>•Manipulators
            <br>•Stream States
            <br>•Formatted I/O
            <br>•Disk Files
            <br>•Reading and Writing Objects<hr>
            <b>ADVANCED TOPICS</b>
            <br>•Template Functions
            <br>•Template Classes
            <br>•Multiple Inheritance
            <br>•User-Defined Conversions
            <br>•Data Structures
            <br>•An Iterator Class
            <br>•Exceptions<hr>
            <b>INTRODUCTION TO THE STANDARD TEMPLATE LIBRARY</b>
            <br>•Introduction
            <br>•The Standard Template Library
            <br>•Design Goals
            <br>•STL Components
            <br>•Iterators
            <br>•Example: vector
            <br>•Example: list
            <br>•Example: set
            <br>•Example: map
            <br>•Example: find
            <br>•Example: merge
            <br>•Example: accumulate
            <br>•Function Objects
            <br>•Adaptors<hr>




            </h5>
          </div>
          <div class="row align_justify">
            <%= link_to "Register", new_student_enrollment_path, class: "winter_btn backorange" %> 
          </div>
        </div>
      </div>
    </section>